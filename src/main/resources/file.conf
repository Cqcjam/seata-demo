transport {
  # tcp udt unix-domain-socket
  type = "TCP"
  #NIO NATIVE
  server = "NIO"
  #enable heartbeat
  heartbeat = true
  # the client batch send request enable
  enableClientBatchSendRequest = true
  #thread factory for netty
  threadFactory {
    bossThreadPrefix = "NettyBoss"
    workerThreadPrefix = "NettyServerNIOWorker"
    serverExecutorThread-prefix = "NettyServerBizHandler"
    shareBossWorker = false
    clientSelectorThreadPrefix = "NettyClientSelector"
    clientSelectorThreadSize = 1
    clientWorkerThreadPrefix = "NettyClientWorkerThread"
    # netty boss thread size,will not be used for UDT
    bossThreadSize = 1
    #auto default pin or 8
    workerThreadSize = "default"
  }
  shutdown {
    # when destroy server, wait seconds
    wait = 3
  }
  # client和server通信编解码方式	seata(ByteBuf)、protobuf、kryo、hession、fst，默认seata
  serialization = "seata"
  # client和server通信数据压缩方式	none、gzip，默认none
  compressor = "none"
}
service {
  #transaction service group mapping
  # 事务群组（附录1）	my_test_tx_group为分组，配置项值为TC集群名
  vgroupMapping.my_test_tx_group = "default"
  #only support when registry.type=file, please don't set multiple addresses
  # TC服务列表（附录2）	仅注册中心为file时使用
  default.grouplist = "127.0.0.1:8091"
  #degrade, current not support
  # 降级 目前不支持
  enableDegrade = false
  #disable seata
  # 全局事务开关	默认false。false为开启，true为关闭
  disableGlobalTransaction = false
}

client {
  rm {
    # 异步提交缓存队列长度	默认10000。 二阶段提交成功，RM异步清理undo队列
    asyncCommitBufferLimit = 10000
    lock {
      # 校验或占用全局锁重试间隔 默认10，单位毫秒
      retryInterval = 10
      # 校验或占用全局锁重试次数 默认30次
      retryTimes = 5
      # 分支事务与其它全局回滚事务冲突时锁策略 默认true，优先释放本地锁让回滚成功
      retryPolicyBranchRollbackOnConflict = true
    }
    # 一阶段结果上报TC重试次数	默认5次
    reportRetryCount = 5
    # 自动刷新缓存中的表结构	默认false
    tableMetaCheckEnable = false
    # 是否上报一阶段成功	true、false，从1.1.0版本开始,默认false.true用于保持分支事务生命周期记录完整，false可提高不少性能
    reportSuccessEnable = false
  }
  tm {
    # 一阶段全局提交结果上报TC重试次数	默认1次，建议大于1
    commitRetryCount = 5
     # 一阶段全局回滚结果上报TC重试次数	默认1次，建议大于1
    rollbackRetryCount = 5
  }
  undo {
    # 二阶段回滚镜像校验	默认true开启，false关闭
    dataValidation = true
    # undo序列化方式	默认jackson
    logSerialization = "jackson"
    # 自定义undo表名	默认undo_log
    logTable = "undo_log"
  }
  log {
  # 日志异常输出概率	默认100，目前用于undo回滚失败时异常堆栈输出，
  # 百分之一的概率输出，回滚失败基本是脏数据，无需输出堆栈占用硬盘空间
    exceptionRate = 100
  }
}